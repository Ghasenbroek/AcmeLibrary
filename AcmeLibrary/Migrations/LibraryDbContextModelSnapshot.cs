// <auto-generated />
using System;
using AcmeLibrary.Models.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AcmeLibrary.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AcmeLibrary.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BookLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("BookId");

                    b.HasIndex("BookLocationId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("AcmeLibrary.Models.BookLocation", b =>
                {
                    b.Property<int>("BookLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BookShelfId")
                        .HasColumnType("int");

                    b.HasKey("BookLocationId");

                    b.HasIndex("BookId");

                    b.HasIndex("BookShelfId");

                    b.ToTable("BookLocations");
                });

            modelBuilder.Entity("AcmeLibrary.Models.BookShelf", b =>
                {
                    b.Property<int>("BookShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RowNumber")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ShelfNumber")
                        .HasColumnType("int");

                    b.Property<string>("SubSection")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookShelfId");

                    b.ToTable("BookShelf");
                });

            modelBuilder.Entity("AcmeLibrary.Models.CheckedOutBook", b =>
                {
                    b.Property<int>("CheckedOutBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpectedReturnDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Returned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReturnedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CheckedOutBookId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserID");

                    b.ToTable("CheckedOutBook");
                });

            modelBuilder.Entity("AcmeLibrary.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("UserID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("AcmeLibrary.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("OutstandingFineBalance")
                        .HasColumnType("decimal");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex("UserId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("AcmeLibrary.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("IdNumber")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AcmeLibrary.Models.Book", b =>
                {
                    b.HasOne("AcmeLibrary.Models.BookLocation", null)
                        .WithMany("Books")
                        .HasForeignKey("BookLocationId");
                });

            modelBuilder.Entity("AcmeLibrary.Models.BookLocation", b =>
                {
                    b.HasOne("AcmeLibrary.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcmeLibrary.Models.BookShelf", "BookShelf")
                        .WithMany("BookLocation")
                        .HasForeignKey("BookShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcmeLibrary.Models.CheckedOutBook", b =>
                {
                    b.HasOne("AcmeLibrary.Models.Book", "Book")
                        .WithMany("CheckedOutBook")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcmeLibrary.Models.User", "User")
                        .WithMany("CheckedOutBooks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcmeLibrary.Models.Employee", b =>
                {
                    b.HasOne("AcmeLibrary.Models.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcmeLibrary.Models.Member", b =>
                {
                    b.HasOne("AcmeLibrary.Models.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
